from abc import ABC, abstractmethod


class Challenge(ABC):
    def __init__(self, number, title):
        super().__init__()
        self.number = number
        self.title = title
    
    @abstractmethod
    def verify(self):
        pass
    
    @abstractmethod
    def pretty_title(self):
        pass

class BlogChallenge(Challenge):
    def __init__(self, merged_prs, number, title):
        super().__init__(number, title)
        self.merged_prs = []
        self.number = number
        self.title = title
    

    def verify(self, num):
        super().verify()
        self.num = num
        return self.num in self.merged_prs
    
    @property
    def pretty_title(self):
        super().pretty_title()
        return f'PCC1 - {super().title}'
        

class BiteChallenge(Challenge):
    def __init__(self, result, number, title):
        super().__init__(number, title)
        self.result = result
        self.number = number
        self.title = title
    
    def verify(self, statement):
        super().verify()
        self.statement = statement
        return self.result == self.statement
    
    @property
    def pretty_title(self):
        super().pretty_title()
        return f'Bite {self.number}. {self.title}'
    
    
